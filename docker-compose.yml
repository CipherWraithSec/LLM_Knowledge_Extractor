# Use a modern version of the Compose file format
version: "3.8"

# This section defines all the individual services (containers)
services:
  # The 'db' service for our PostgreSQL database
  db:
    # Use the official PostgreSQL image, based on Alpine Linux for a smaller footprint
    image: postgres:16-alpine
    # Restart the container automatically if it crashes
    restart: always
    # Environment variables for configuring the database on first run
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # Mount a named volume to persist the database data
    # This prevents your data from being lost when the container is stopped or deleted
    volumes:
      - pg_data:/var/lib/postgresql/data
    # Map container port 5432 to your host machine's port 5432
    # This allows you to connect to the database directly from your host if needed
    ports:
      - "5432:5432"

  # The 'server' service for our Python FastAPI backend
  server:
    # Build the Docker image from the Dockerfile located in the 'apps/server' directory
    build:
      # Set the build context to the server directory
      context: ./apps/server
      # The Dockerfile is in the build context
      dockerfile: Dockerfile
    # ... rest of the server service config ...
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
    # Set a command to run the FastAPI app with Uvicorn.
    # The `reload` flag should be used for development only.
    command: >
      sh -c "prisma generate && prisma migrate deploy && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    # Mount the source code for hot-reloading in development
    volumes:
      - ./apps/server:/app:delegated
      - ./prisma:/app/prisma:delegated

  # The 'client' service for our Next.js frontend
  client:
    # Build the Docker image from the Dockerfile located in the 'apps/client' directory
    build:
      context: ./apps/client
      dockerfile: Dockerfile
    command: npm run dev
    # Map container port 3000 to your host machine's port 3000
    ports:
      - "3000:3000"
    # Load environment variables from the root '.env' file
    env_file:
      - .env
    # Pass the backend API URL to your Next.js app.
    # The 'server' hostname is automatically resolved by Docker's network.
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    # Specify dependency so the backend is ready before the frontend starts
    depends_on:
      - server
    # Mount the source code for hot-reloading in development
    volumes:
      - ./apps/client:/app:delegated
      # Special mount to prevent node_modules from being overwritten
      - /app/node_modules

# This section defines named volumes for data persistence
volumes:
  pg_data:
